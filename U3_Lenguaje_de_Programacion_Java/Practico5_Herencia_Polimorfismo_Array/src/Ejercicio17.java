/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */

/**
 *
 * @author Milagros Pozzo
 */
public class Ejercicio17 {
    
}
/*
// DESAF√çO 17: LISTA DE NOMBRES

ENUNCIADO:
Implementar un programa que use un ArrayList<String> para almacenar nombres ingresados 
manualmente y luego mostrarlos en pantalla. Resolver nivel inicial comentar y explicar 
razonamiento desde la l√≠nea 1 del c√≥digo sin numerarlo. Fundamentaci√≥n de la soluci√≥n 
bien detallada: Explicar la estrategia, qu√© pensaste para resolver el problema, etc.
*/

/*
üéØ DESAF√çO 17: LISTA DE NOMBRES

ENUNCIADO:
Implementar un programa que use un ArrayList<String> para almacenar nombres ingresados 
manualmente y luego mostrarlos en pantalla. Resolver nivel inicial comentar y explicar 
razonamiento desde la l√≠nea 1 del c√≥digo sin numerarlo. Fundamentaci√≥n de la soluci√≥n 
bien detallada: Explicar la estrategia, qu√© pensaste para resolver el problema, etc.
*/

// Importamos ArrayList desde el paquete java.util para poder usar estructuras de datos din√°micas
// ArrayList nos permite crear listas que pueden crecer y reducirse autom√°ticamente seg√∫n necesitemos
import java.util.ArrayList;

// Importamos Scanner desde java.util para poder leer datos desde el teclado
// Scanner es la clase m√°s com√∫n para capturar entrada del usuario en aplicaciones de consola
import java.util.Scanner;

// Declaramos nuestra clase principal que contendr√° toda la l√≥gica del programa
// El nombre de la clase debe coincidir exactamente con el nombre del archivo .java
public class ListaNombres {
    
    // M√©todo main: punto de entrada de cualquier programa Java
    // Es el primer m√©todo que se ejecuta cuando corremos el programa
    public static void main(String[] args) {
        
        // Creamos un objeto Scanner conectado a System.in (entrada est√°ndar del sistema)
        // System.in representa el teclado, por lo que sc podr√° leer lo que el usuario escriba
        Scanner sc = new Scanner(System.in);
        
        // Creamos un ArrayList de tipo String para almacenar los nombres
        // ArrayList<String> significa: lista din√°mica que solo puede contener cadenas de texto
        // La ventaja de ArrayList sobre arrays normales es que no necesitamos definir un tama√±o fijo
        ArrayList<String> nombres = new ArrayList<>();
        
        // Mostramos un t√≠tulo llamativo para que el usuario sepa qu√© hace nuestro programa
        // Los s√≠mbolos === son puramente decorativos para hacer m√°s visual la salida
        System.out.println("=== Programa Lista de Nombres ===");
        
        // Iniciamos un bucle infinito para recopilar nombres de manera continua
        // while(true) significa "repetir para siempre" hasta que encontremos un break
        // Esta es una t√©cnica com√∫n cuando no sabemos exactamente cu√°ntas veces se repetir√° algo
        while (true) {
            
            // Mostramos las instrucciones al usuario de manera clara
            // Le explicamos qu√© puede hacer y c√≥mo terminar el programa
            System.out.print("Ingrese un nombre (o 'fin' para terminar): ");
            
            // Leemos una l√≠nea completa de texto que escriba el usuario
            // nextLine() captura todo lo que escriba hasta que presione Enter
            // Esto nos permite manejar nombres con espacios como "Mar√≠a Jos√©"
            String nombre = sc.nextLine();
            
            // Verificamos si el usuario quiere terminar el programa
            // equalsIgnoreCase() compara textos sin importar may√∫sculas o min√∫sculas
            // Esto significa que "fin", "FIN", "Fin", "fIn" todos funcionar√°n para terminar
            if (nombre.equalsIgnoreCase("fin")) {
                // break nos saca inmediatamente del bucle while
                // El programa continuar√° con la siguiente l√≠nea despu√©s del while
                break;
            }
            
            // Si llegamos aqu√≠, significa que el usuario NO escribi√≥ "fin"
            // Entonces agregamos el nombre a nuestra lista usando el m√©todo add()
            // add() siempre coloca el nuevo elemento al final de la lista
            nombres.add(nombre);
            
            // El bucle while se repite autom√°ticamente, pidiendo otro nombre
        }
        
        // Una vez que salimos del bucle, mostramos todos los nombres recopilados
        // \n crea una l√≠nea en blanco para separar visualmente las secciones del programa
        System.out.println("\n=== Nombres ingresados ===");
        
        // Usamos un bucle for-each (tambi√©n llamado "enhanced for loop")
        // La sintaxis es: for(TipoDato variable : coleccion)
        // Esto significa: "para cada String n que est√© dentro de nombres"
        // Es la forma m√°s elegante de recorrer todos los elementos de una lista
        for (String n : nombres) {
            // Imprimimos cada nombre en una l√≠nea separada
            // n toma autom√°ticamente el valor de cada elemento de la lista, uno por uno
            System.out.println(n);
        }
        
        // IMPORTANTE: Cerramos el Scanner para liberar los recursos del sistema
        // Si no hacemos esto, el programa podr√≠a causar "memory leaks" (fugas de memoria)
        // Es una buena pr√°ctica siempre cerrar los recursos que abrimos
        sc.close();
        
        // El programa termina aqu√≠ autom√°ticamente
        // Java se encarga de limpiar la memoria y finalizar la ejecuci√≥n
    }
}